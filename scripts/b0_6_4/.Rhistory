# }
# rho_mean = apply(rho_,2,mean)
# rho_sd   = apply(rho_,2,sd)
# d_mean   = apply(  d_,2,mean)
# #
# ## visualise correlation with distance
# pdf(paste(pto,"/fig_spatial_autocorrelations.pdf",sep=""));
# x = d_mean
# y = rho_mean
# plot(x, y, xlim=c(min(D),max(D)), ylim=c(0,1), xaxt="n", yaxt="n", bty="l")
# add_axes_and_grid(x, y, alpha=c(1, 0.1))
# polygon(x=c(d_mean,rev(d_mean)),y=c(rho_mean+2*rho_sd,rev(rho_mean-2*rho_sd)),border=NA,col=grey(0.5,alpha=0.25))
# lines(d_mean,rho_mean,col="red")
# dev.off()
#
###
#####
## ##
#####
## goal:
## author: Willem Bonnaffe (w.bonnaffe@gmail.com)
###############
## FUNCTIONS ##
###############
#
###
##############
## INITIATE ##
##############
#
###
#############
## FIGURES ##
#############
## goal:
## load module
source("m1_mTL_load.r")
# source("m1_con_load.r")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,".RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
load(paste(pto,"/chain_thinned_",2,".RData",sep="")); chainList_[[2]] = chainList_thinned[[1]]
chainList_thinned = chainList_
## format chain
chainList_  = list()
for(i in 1:length(chainList_thinned))
{
chain_ = cbind(chainList_thinned[[i]][,1], chainList_thinned[[i]][,-1][,idx_omega_beta])
colnames(chain_) = c("P",colnames(X_obs))
chainList_[[i]] = chain_
}
chainList_mtl = chainList_
## load module
# source("m1_mTL_load.r")
source("m1_con_load.r")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,".RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
load(paste(pto,"/chain_thinned_",2,".RData",sep="")); chainList_[[2]] = chainList_thinned[[1]]
chainList_thinned = chainList_
## format chain
chainList_  = list()
for(i in 1:length(chainList_thinned))
{
chain_ = cbind(chainList_thinned[[i]][,1], chainList_thinned[[i]][,-1][,idx_omega_beta])
colnames(chain_) = c("P",colnames(X_obs))
chainList_[[i]] = chain_
}
chainList_con = chainList_
## COMBINED BAYES PLOT ##
system("mkdir out_combined")
pdf(paste("out_combined/fig_bayesPlot_beta.pdf",sep=""), width=12, height=6)
## plot
par(mfrow=c(1,2), mar=c(1,1,1,1), oma=c(2,14,2,2))
chainList.bayesPlot(chainList_mtl)
# legend("topright", "a.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "a.", side = 3, line = 1, at = x, cex = 1.25)
#
chainList.bayesPlot(chainList_con, labels = c(""))
# legend("topright", "b.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "b.", side = 3, line = 1, at = x, cex = 1.25)
#
par(mfrow=c(1,1))
## terminate
dev.off()
#
###
#####
## ##
#####
## goal:
## author: Willem Bonnaffe (w.bonnaffe@gmail.com)
###############
## FUNCTIONS ##
###############
#
###
##############
## INITIATE ##
##############
#
###
#############
## FIGURES ##
#############
## goal:
## load module
source("m1_mTL_load.r")
# source("m1_con_load.r")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,"_resumed.RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
#####
## ##
#####
## goal:
## author: Willem Bonnaffe (w.bonnaffe@gmail.com)
###############
## FUNCTIONS ##
###############
#
###
##############
## INITIATE ##
##############
#
###
#############
## FIGURES ##
#############
## goal:
## load module
source("m1_mTL_load.r")
# source("m1_con_load.r")
## Change input director
pto = paste(pto, "robustness", sep="_")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,"_resumed.RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
chainList_thinned = chainList_
## format chain
chainList_  = list()
for(i in 1:length(chainList_thinned))
{
chain_ = cbind(chainList_thinned[[i]][,1], chainList_thinned[[i]][,-1][,idx_omega_beta])
colnames(chain_) = c("P",colnames(X_obs))
chainList_[[i]] = chain_
}
chainList_mtl = chainList_
## load module
# source("m1_mTL_load.r")
source("m1_con_load.r")
## Change input director
pto = paste(pto, "robustness", sep="_")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,"_resumed.RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
chainList_thinned = chainList_
## format chain
chainList_  = list()
for(i in 1:length(chainList_thinned))
{
chain_ = cbind(chainList_thinned[[i]][,1], chainList_thinned[[i]][,-1][,idx_omega_beta])
colnames(chain_) = c("P",colnames(X_obs))
chainList_[[i]] = chain_
}
chainList_con = chainList_
## COMBINED BAYES PLOT ##
system("mkdir out_combined_robustness")
pdf(paste("out_combined_robustness/fig_bayesPlot_beta.pdf",sep=""), width=12, height=6)
## plot
par(mfrow=c(1,2), mar=c(1,1,1,1), oma=c(2,14,2,2))
chainList.bayesPlot(chainList_mtl)
# legend("topright", "a.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "a.", side = 3, line = 1, at = x, cex = 1.25)
#
chainList.bayesPlot(chainList_con, labels = c(""))
# legend("topright", "b.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "b.", side = 3, line = 1, at = x, cex = 1.25)
#
par(mfrow=c(1,1))
## terminate
dev.off()
#
###
## plot
par(mfrow=c(1,2), mar=c(1,1,1,1), oma=c(4,14,2,2))
chainList.bayesPlot(chainList_mtl)
# legend("topright", "a.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "a.", side = 3, line = 1, at = x, cex = 1.25)
#
chainList.bayesPlot(chainList_con, labels = c(""))
# legend("topright", "b.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "b.", side = 3, line = 1, at = x, cex = 1.25)
#
par(mfrow=c(1,1))
## plot
par(mfrow=c(1,2), mar=c(1,1,1,1), oma=c(2,14,2,2))
chainList.bayesPlot(chainList_mtl)
# legend("topright", "a.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "a.", side = 3, line = 1, at = x, cex = 1.25)
#
chainList.bayesPlot(chainList_con, labels = c(""))
# legend("topright", "b.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "b.", side = 3, line = 1, at = x, cex = 1.25)
#
par(mfrow=c(1,1))
## plot
par(mfrow=c(1,2), mar=c(4,1,1,1), oma=c(2,14,2,2))
chainList.bayesPlot(chainList_mtl)
# legend("topright", "a.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "a.", side = 3, line = 1, at = x, cex = 1.25)
#
chainList.bayesPlot(chainList_con, labels = c(""))
# legend("topright", "b.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "b.", side = 3, line = 1, at = x, cex = 1.25)
#
par(mfrow=c(1,1))
## COMBINED BAYES PLOT ##
system("mkdir out_combined")
pdf(paste("out_combined/fig_bayesPlot_beta.pdf",sep=""), width=12, height=6)
## plot
par(mfrow=c(1,2), mar=c(4,1,1,1), oma=c(2,14,2,2))
chainList.bayesPlot(chainList_mtl)
# legend("topright", "a.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "a.", side = 3, line = 1, at = x, cex = 1.25)
#
chainList.bayesPlot(chainList_con, labels = c(""))
# legend("topright", "b.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "b.", side = 3, line = 1, at = x, cex = 1.25)
#
par(mfrow=c(1,1))
## terminate
dev.off()
#####
## ##
#####
## goal:
## author: Willem Bonnaffe (w.bonnaffe@gmail.com)
###############
## FUNCTIONS ##
###############
#
###
##############
## INITIATE ##
##############
#
###
#############
## FIGURES ##
#############
## goal:
## load module
source("m1_mTL_load.r")
# source("m1_con_load.r")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,".RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
load(paste(pto,"/chain_thinned_",2,".RData",sep="")); chainList_[[2]] = chainList_thinned[[1]]
chainList_thinned = chainList_
## format chain
chainList_  = list()
for(i in 1:length(chainList_thinned))
{
chain_ = cbind(chainList_thinned[[i]][,1], chainList_thinned[[i]][,-1][,idx_omega_beta])
colnames(chain_) = c("P",colnames(X_obs))
chainList_[[i]] = chain_
}
chainList_mtl = chainList_
## load module
# source("m1_mTL_load.r")
source("m1_con_load.r")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,".RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
load(paste(pto,"/chain_thinned_",2,".RData",sep="")); chainList_[[2]] = chainList_thinned[[1]]
chainList_thinned = chainList_
## format chain
chainList_  = list()
for(i in 1:length(chainList_thinned))
{
chain_ = cbind(chainList_thinned[[i]][,1], chainList_thinned[[i]][,-1][,idx_omega_beta])
colnames(chain_) = c("P",colnames(X_obs))
chainList_[[i]] = chain_
}
chainList_con = chainList_
## COMBINED BAYES PLOT ##
system("mkdir out_combined")
pdf(paste("out_combined/fig_bayesPlot_beta.pdf",sep=""), width=12, height=6)
## plot
par(mfrow=c(1,2), mar=c(4,1,1,1), oma=c(2,14,2,2))
chainList.bayesPlot(chainList_mtl)
# legend("topright", "a.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "a.", side = 3, line = 1, at = x, cex = 1.25)
#
chainList.bayesPlot(chainList_con, labels = c(""))
# legend("topright", "b.", bty="n")
## add the label above the plot
x <- par("usr")[2] - 0.05  # Adjust the x-coordinate as needed
y <- par("usr")[4] + 0.05  # Adjust the y-coordinate to position it above the plot
mtext(text = "b.", side = 3, line = 1, at = x, cex = 1.25)
#
par(mfrow=c(1,1))
## terminate
dev.off()
#
###
## load module
source("m1_con_load.r")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,".RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
load(paste(pto,"/chain_thinned_",2,".RData",sep="")); chainList_[[2]] = chainList_thinned[[1]]
chainList_thinned = chainList_
## SUMMARY TABLE ##
summaryTable_ = chainList.summaryTab(chainList_)[[1]]
summaryTable = cbind(rownames(summaryTable_),summaryTable_)
colnames(summaryTable) = c("name",colnames(summaryTable_))
# write.table(summaryTable,file=paste(pto,"/summary.csv",sep=""),sep=",",row.names=F,quote=F)
nscode = (summaryTable$signif[-1]=="*")*1
## VERIFY MODEL ASSUMPTIONS ##
x_mis_ = apply(chainList.unlist(chainList_thinned)[,-1][,idx_omega_xmis],2,mean)
X_mis_ = X_mis_l * X_mis_r(x_mis_)
chainList_ = list(chainList.unlist(chainList_thinned)[,-1][,idx_omega_beta])
Yhat_obs = chainList.apply(chainList_,function(x)Yhat(X_obs,x))$f_mean
Yhat_mis = chainList.apply(chainList_,function(x)Yhat(X_mis_,x))$f_mean
res_obs = Y_obs - Yhat_obs
res_mis = Y_mis - Yhat_mis
res = c(res_obs, res_mis)
## Preparing sites
sites = data$station
sites_obs = sites[-idx_mis]
sites_mis = sites[idx_mis]
par(mfrow=c(2,1))
barplot(table(sites_obs))
barplot(table(sites_mis))
par(mfrow=c(1,1))
## Getting multiple sample sites
idx_msample_obs = which(table(sites_obs) > 2)
idx_msample_mis = which(table(sites_mis) > 2)
sites_obs_msampled = names(table(sites_obs))[idx_msample_obs]
sites_mis_msampled = names(table(sites_mis))[idx_msample_mis]
## Fraction of multiply sampled sites
prop_msampled_obs = length(sites_obs_msampled)/length(table(sites_obs))
print(prop_msampled_obs)
prop_msampled_mis = length(sites_mis_msampled)/length(table(sites_mis))
print(prop_msampled_mis)
quantile(table(sites_obs))
quantile(table(sites_mis))
## Looking at residual time series for multiple sites
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:100)
{
col = rainbow(100)[round(runif(1,1,100))]
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
lines(1:length(res_obs_), res_obs_, col=col)
}
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)]) # left tacking (lag 1)
res_obs_ll = c(res_obs_l[length(res_obs_l)], res_obs_l[-length(res_obs_l)]) # left left tacking (lag 2)
res_obs_lll = c(res_obs_ll[length(res_obs_ll)], res_obs_ll[-length(res_obs_ll)])
res_obs_r = c(res_obs_[-1], res_obs_[1]) # right tacking (lag 1)
res_obs_rr = c(res_obs_r[-1], res_obs_r[1]) # right right tacking (lag 2)
res_obs_rrr = c(res_obs_rr[-1], res_obs_rr[1])
cor_ = 1/3 * cor(res_obs_l, res_obs_r) + 1/3 * cor(res_obs_ll, res_obs_rr) + 1/3 * cor(res_obs_lll, res_obs_rrr)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(abs(cor_vector_obs), ylim=c(0,1))
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
print(quantile(abs(cor_vector_obs), probs = c(0.975))) # ~ p(abs(rho) > 0.44) <= 0.05
dev.off()
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)]) # left tacking (lag 1)
res_obs_ll = c(res_obs_l[length(res_obs_l)], res_obs_l[-length(res_obs_l)]) # left left tacking (lag 2)
res_obs_lll = c(res_obs_ll[length(res_obs_ll)], res_obs_ll[-length(res_obs_ll)])
res_obs_r = c(res_obs_[-1], res_obs_[1]) # right tacking (lag 1)
res_obs_rr = c(res_obs_r[-1], res_obs_r[1]) # right right tacking (lag 2)
res_obs_rrr = c(res_obs_rr[-1], res_obs_rr[1])
cor_ = 1/3 * cor(res_obs_l, res_obs_r) + 1/3 * cor(res_obs_ll, res_obs_rr) + 1/3 * cor(res_obs_lll, res_obs_rrr)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(abs(cor_vector_obs), ylim=c(0,1))
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
print(quantile(abs(cor_vector_obs), probs = c(0.975))) # ~ p(abs(rho) > 0.44) <= 0.05
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)]) # left tacking (lag 1)
res_obs_ll = c(res_obs_l[length(res_obs_l)], res_obs_l[-length(res_obs_l)]) # left left tacking (lag 2)
res_obs_lll = c(res_obs_ll[length(res_obs_ll)], res_obs_ll[-length(res_obs_ll)])
res_obs_r = c(res_obs_[-1], res_obs_[1]) # right tacking (lag 1)
res_obs_rr = c(res_obs_r[-1], res_obs_r[1]) # right right tacking (lag 2)
res_obs_rrr = c(res_obs_rr[-1], res_obs_rr[1])
cor_ = 1/3 * cor(res_obs_l, res_obs_r) + 1/3 * cor(res_obs_ll, res_obs_rr) + 1/3 * cor(res_obs_lll, res_obs_rrr)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(abs(cor_vector_obs), ylim=c(0,1))
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
print(quantile(abs(cor_vector_obs), probs = c(0.975))) # ~ p(abs(rho) > 0.44) <= 0.05
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)]) # left tacking (lag 1)
res_obs_ll = c(res_obs_l[length(res_obs_l)], res_obs_l[-length(res_obs_l)]) # left left tacking (lag 2)
res_obs_lll = c(res_obs_ll[length(res_obs_ll)], res_obs_ll[-length(res_obs_ll)])
res_obs_r = c(res_obs_[-1], res_obs_[1]) # right tacking (lag 1)
res_obs_rr = c(res_obs_r[-1], res_obs_r[1]) # right right tacking (lag 2)
res_obs_rrr = c(res_obs_rr[-1], res_obs_rr[1])
cor_ = 1/3 * cor(res_obs_l, res_obs_r) + 1/3 * cor(res_obs_ll, res_obs_rr) + 1/3 * cor(res_obs_lll, res_obs_rrr)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(abs(cor_vector_obs), ylim=c(0,1))
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
print(quantile(abs(cor_vector_obs), probs = c(0.975))) # ~ p(abs(rho) > 0.44) <= 0.05
## Looking at residual time series for multiple sites
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:100)
{
col = rainbow(100)[round(runif(1,1,100))]
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
lines(1:length(res_obs_), res_obs_, col=col)
}
## Fraction of multiply sampled sites
prop_msampled_obs = length(sites_obs_msampled)/length(table(sites_obs))
print(prop_msampled_obs)
prop_msampled_mis = length(sites_mis_msampled)/length(table(sites_mis))
print(prop_msampled_mis)
quantile(table(sites_obs))
quantile(table(sites_mis))

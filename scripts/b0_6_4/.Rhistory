## 25-08-2023 - created v0_3
##            - improved figures
###############
## FUNCTIONS ##
###############
## add_axis_and_grid
## Goal: Add custom axis and grid to plot given the vector of x and y data.
## Arguments:
## * x - vector - vector of x coordinates of the data to plot
## * x_ - vector - vector of standardised x coordinates of the data to plot
## * y - vector - vector of y coordinates of the data to plot
## * y_ - vector - vector of standardised y coordinates of the data to plot
add_axes_and_grid = function(x, y, alpha)
{
## format data x
alpha_x = alpha[1]
lb_x = floor(min(x)/alpha_x)*alpha_x
rb_x = ceiling(max(x)/alpha_x)*alpha_x
dx = 2.5
x = seq(lb_x, rb_x, dx * alpha_x)
## format data y
alpha_y = alpha[2]
lb_y = floor(min(y)/alpha_y)*alpha_y
rb_y = ceiling(max(y)/alpha_y)*alpha_y
dy = 2.5
y = seq(lb_y, rb_y, dy * alpha_y)
## background
coords = par("usr")
coords_x = coords[1:2]
coords_y = coords[3:4]
polygon(x=c(coords_x, rev(coords_x)), y=c(c(coords_y[1],coords_y[1]), c(coords_y[2],coords_y[2])), col=adjustcolor("lightgrey",alpha=0.2), border=NA)
## grid guides
for (l in 1:length(y)) lines(c(x[1]-10,x[length(x)]+10), c(y[l], y[l]), col="white")
for (l in 1:length(x)) lines(c(x[l], x[l]), c(y[1]-10,y[length(y)]+10), col="white")
## x axis
axis(1, label=x, at=x, lwd=0, lwd.ticks=1)
axis(2, label=y, at=y, lwd=0, lwd.ticks=1)
}
#
###
##############
## INITIATE ##
##############
## load module
source("m1_con_load.r")
## load chains
chainList_ = list()
load(paste(pto,"/chain_thinned_",1,".RData",sep="")); chainList_[[1]] = chainList_thinned[[1]]
load(paste(pto,"/chain_thinned_",2,".RData",sep="")); chainList_[[2]] = chainList_thinned[[1]]
chainList_thinned = chainList_
## VISUALISE PARAMETER POSTERIOR DISTRIBUTIONS ##
chainList_  = list()
for(i in 1:length(chainList_thinned))
{
chain_ = cbind(chainList_thinned[[i]][,1], chainList_thinned[[i]][,-1][,idx_omega_beta])
colnames(chain_) = c("P",colnames(X_obs))
chainList_[[i]] = chain_
}
x_mis_ = apply(chainList.unlist(chainList_thinned)[,-1][,idx_omega_xmis],2,mean)
X_mis_ = X_mis_l * X_mis_r(x_mis_)
chainList_ = list(chainList.unlist(chainList_thinned)[,-1][,idx_omega_beta])
Yhat_obs = chainList.apply(chainList_,function(x)Yhat(X_obs,x))$f_mean
Yhat_mis = chainList.apply(chainList_,function(x)Yhat(X_mis_,x))$f_mean
res_obs = Y_obs - Yhat_obs
res_mis = Y_mis - Yhat_mis
res = c(res_obs, res_mis)
sites = data$station
sites_obs = sites[-idx_mis]
sites_mis = sites[idx_mis]
head(table(sites))
length(table(sites))
barplot(table(sites))
par(mfrow=c(2,1))
barplot(table(sites_obs))
barplot(table(sites_mis))
par(mfrow=c(1,1))
## Looking at one site
site = sites_obs[1]
res_obs_ = res_obs[which(sites_obs == site)]
plot(res_obs_)
site = sites_obs[2]
res_obs_ = res_obs[which(sites_obs == site)]
plot(res_obs_)
site = sites_obs[10]
res_obs_ = res_obs[which(sites_obs == site)]
plot(res_obs_)
site
which(sites_obs == site)
site = sites_obs[14]
res_obs_ = res_obs[which(sites_obs == site)]
plot(res_obs_)
which(table(sites_obs) > 1)
idx_msample_obs = which(table(sites_obs) > 1)
idx_msample_mis = which(table(sites_mis) > 1)
idx_msample_obs[1]
sites_obs[idx_msample_obs[1]]
## Looking at one site
site = sites_obs[idx_msample_obs[1]]
site
sites_obs == site
which(sites_obs == site)
site
par(mfrow=c(2,1))
barplot(table(sites_obs))
barplot(table(sites_mis))
par(mfrow=c(1,1))
head(names(table(sites_obs)))
## Getting multiple sample sites
idx_msample_obs = which(table(sites_obs) > 1)
idx_msample_mis = which(table(sites_mis) > 1)
sites_obs_msampled = names(table(sites_obs))[idx_msample_obs]
sites_mis_msampled = names(table(sites_mis))[idx_msample_mis]
site = sites_obs_msampled[1]
res_obs_ = res_obs[which(sites_obs == site)]
plot(res_obs_)
plot(res_obs_, type="l")
## Looking at one site
for (i in 1:10)
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:10)
{
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
lines(1:length(res_obs_), res_obs_)
}
plot(1:100, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:10)
{
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
lines(1:length(res_obs_), res_obs_)
}
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:100)
{
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
lines(1:length(res_obs_), res_obs_)
}
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:100)
{
col = rainbow(100)[round(runif(1,100))]
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
lines(1:length(res_obs_), res_obs_, col=col)
}
round(runif(1,100))
round(runif(1,1,100))
round(runif(1,1,100))
round(runif(1,1,100))
round(runif(1,1,100))
round(runif(1,1,100))
round(runif(1,1,100))
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:100)
{
col = rainbow(100)[round(runif(1,1,100))]
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
lines(1:length(res_obs_), res_obs_, col=col)
}
res_obs_[-1]
res_obs_
res_obs_l = c(NA, res_obs_[-1])
res_obs_r = c(res_obs_[-length(res_obs_)], NA)
res_obs_r
res_obs_l
## Compute ACs
res_obs_l = c(NA, res_obs_)
res_obs_r = c(res_obs_, NA)
res_obs_l
res_obs_r
cor(res_obs_l, res_obs_r, na.rm=T)
cor(res_obs_l, res_obs_r)
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)])
res_obs_r = c(res_obs_[-1], res_obs_[1])
res_obs_r
res_obs_l
res_obs_
cor(res_obs_l, res_obs_r)
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:100)
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)])
res_obs_r = c(res_obs_[-1], res_obs_[1])
cor_ = cor(res_obs_l, res_obs_r)
## Draw
col = rainbow(100)[round(runif(1,1,100))]
points(i, cor_, col=col)
}
plot(1:10, cex=0, ylim=c(-1,1), xlim=c(0,12))
for (i in 1:100)
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)])
res_obs_r = c(res_obs_[-1], res_obs_[1])
cor_ = cor(res_obs_l, res_obs_r)
## Draw
col = rainbow(100)[round(runif(1,1,100))]
points(i, cor_, col=col)
}
length(sites_obs_msampled)
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)])
res_obs_r = c(res_obs_[-1], res_obs_[1])
cor_ = cor(res_obs_l, res_obs_r)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(cor_vector_obs)
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)])
res_obs_r = c(res_obs_[-1], res_obs_[1])
cor_ = cor(res_obs_l, res_obs_r)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(cor_vector_obs)
high_correlations = which(cor_vector_obs == 1)
high_correlations
sites_obs_msampled[idx_high_correlations[1]]
idx_high_correlations = which(cor_vector_obs == 1)
sites_obs_msampled[idx_high_correlations[1]]
print(res_obs[which(sites_obs == sites_obs_msampled[idx_high_correlations[1]])])
## Getting multiple sample sites
idx_msample_obs = which(table(sites_obs) > 2)
idx_msample_mis = which(table(sites_mis) > 2)
sites_obs_msampled = names(table(sites_obs))[idx_msample_obs]
sites_mis_msampled = names(table(sites_mis))[idx_msample_mis]
## Looking at residual time series for multiple sites
plot(1:10, cex=0, ylim=c(-3,3), xlim=c(0,12))
for (i in 1:100)
{
col = rainbow(100)[round(runif(1,1,100))]
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
lines(1:length(res_obs_), res_obs_, col=col)
}
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)])
res_obs_r = c(res_obs_[-1], res_obs_[1])
cor_ = cor(res_obs_l, res_obs_r)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(cor_vector_obs)
lines(c(1, length(cor_vector_obs)), c(0.25,0.25))
## Visualise
barplot(cor_vector_obs)
lines(c(1, length(cor_vector_obs)), c(0.25,0.25))
lines(c(1, length(cor_vector_obs)*10), -c(0.25,0.25))
barplot(cor_vector_obs)
lines(c(1, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(1, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
barplot(cor_vector_obs)
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
hist(cor_vector_obs)
barplot(cor_vector_obs)
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
## Computing temporal ACs for multiple sites
cor_vector_mis = NULL
## Getting multiple sample sites
idx_msample_obs = which(table(sites_obs) > 2)
idx_msample_mis = which(table(sites_mis) > 2)
sites_obs_msampled = names(table(sites_obs))[idx_msample_obs]
sites_mis_msampled = names(table(sites_mis))[idx_msample_mis]
## Computing temporal ACs for multiple sites
cor_vector_mis = NULL
for (i in 1:length(sites_mis_msampled))
{
## Get site and miservations
site = sites_mis_msampled[i]
res_mis_ = res_mis[which(sites_mis == site)]
## Compute ACs
res_mis_l = c(res_mis_[length(res_mis_)], res_mis_[-length(res_mis_)])
res_mis_r = c(res_mis_[-1], res_mis_[1])
cor_ = cor(res_mis_l, res_mis_r)
## Collect
cor_vector_mis = c(cor_vector_mis, cor_)
}
## Visualise
barplot(cor_vector_mis)
lines(c(0, length(cor_vector_mis)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_mis)*10), -c(0.25,0.25), lty=2)
# hist(cor_vector_mis)
## Getting multiple sample sites
idx_msample_obs = which(table(sites_obs) > 2)
idx_msample_mis = which(table(sites_mis) > 2)
sites_obs_msampled = names(table(sites_obs))[idx_msample_obs]
sites_mis_msampled = names(table(sites_mis))[idx_msample_mis]
sites_mis_msampled
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)])
res_obs_r = c(res_obs_[-1], res_obs_[1])
cor_ = cor(res_obs_l, res_obs_r)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(cor_vector_obs)
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
# hist(cor_vector_obs)
frac_msampled_obs = sites_obs_msampled/length(table(sites_obs))
## Fraction of multiply sampled sites
frac_msampled_obs = length(sites_obs_msampled)/length(table(sites_obs))
frac_msampled_obs
prop_msampled_obs = length(sites_obs_msampled)/length(table(sites_obs))
print(prop_msampled_obs)
boxplot(cor_vector_obs)
boxplot(cor_vector_obs, ylim=c(-1,1))
quantile(cor_vector_obs, probs = c(0.05,0.95))
barplot(cor_vector_obs)
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)])
res_obs_ll = c(res_obs_l[length(res_obs_l)], res_obs_l[-length(res_obs_l)])
res_obs_r = c(res_obs_[-1], res_obs_[1])
res_obs_rr = c(res_obs_r[-1], res_obs_r[1])
cor_ = 0.5 * cor(res_obs_l, res_obs_r) + 0.5 * cor(res_obs_ll, res_obs_rr)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(cor_vector_obs)
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
barplot(cor_vector_obs, ylim=c(-1,1))
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
## Computing temporal ACs for multiple sites
cor_vector_obs = NULL
for (i in 1:length(sites_obs_msampled))
{
## Get site and observations
site = sites_obs_msampled[i]
res_obs_ = res_obs[which(sites_obs == site)]
## Compute ACs
res_obs_l = c(res_obs_[length(res_obs_)], res_obs_[-length(res_obs_)]) # left tacking (lag 1)
res_obs_ll = c(res_obs_l[length(res_obs_l)], res_obs_l[-length(res_obs_l)]) # left left tacking (lag 2)
res_obs_lll = c(res_obs_ll[length(res_obs_ll)], res_obs_ll[-length(res_obs_ll)])
res_obs_r = c(res_obs_[-1], res_obs_[1]) # right tacking (lag 1)
res_obs_rr = c(res_obs_r[-1], res_obs_r[1]) # right right tacking (lag 2)
res_obs_rrr = c(res_obs_rr[-1], res_obs_rr[1])
cor_ = 1/3 * cor(res_obs_l, res_obs_r) + 1/3 * cor(res_obs_ll, res_obs_rr) + 1/3 * cor(res_obs_lll, res_obs_rrr)
## Collect
cor_vector_obs = c(cor_vector_obs, cor_)
}
## Visualise
barplot(cor_vector_obs, ylim=c(-1,1))
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
barplot(abs(cor_vector_obs), ylim=c(-1,1))
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
print(quantile(abs(cor_vector_obs), probs = c(0.025, 0.095)))
print(quantile(abs(cor_vector_obs), probs = c(0.025, 0.95)))
print(quantile(abs(cor_vector_obs), probs = c(0.25, 0.95)))
print(quantile(abs(cor_vector_obs), probs = c(0.05, 0.95)))
print(quantile(abs(cor_vector_obs), probs = c(0.975)))
barplot(abs(cor_vector_obs), ylim=c(0,1))
lines(c(0, length(cor_vector_obs)*10), c(0.25,0.25), lty=2)
lines(c(0, length(cor_vector_obs)*10), -c(0.25,0.25), lty=2)
print(quantile(abs(cor_vector_obs), probs = c(0.975))) # ~ p(abs(rho) > 0.44) <= 0.05
## libraries
library(Rcpp)
## load modules
sourceCpp("cpp/DEMCO_v0.5.cpp")
## load modules
sourceCpp("cpp/DEMCpp_v0.2.cpp")
## load data and model
source("m1_con_load.r")
## chain name
chainName = "chain_thinned_1_resumed"
message(paste(pto,"/",chainName,".RData",sep=""))
## Load chains
load(paste(pto,"/chain_thinned_",1,".RData",sep=""));
primerChain = chainList_thinned[[1]]
head(primerChain)
dim(primerChain)
nIt = 10
chain = DEMCpp(list("dTarget" = dTarget,
"epsilon" = 0.001,
"nIt" = nIt,
"primerChain" = primerChain))$chainList
chain[,-1] = t(apply(chain[,-1],1,unwrap))
chainList  = list(chain)
nIt = 200
chain = DEMCpp(list("dTarget" = dTarget,
"epsilon" = 0.001,
"nIt" = nIt,
"primerChain" = primerChain))$chainList
primerChain_wrapped[,-1] = t(apply(primerChain[,-1],1,unwrap))
## Check
primerChain_unwrapped = primerChain
primerChain_wrapped = primerChain
primerChain_wrapped[,-1] = t(apply(primerChain[,-1],1,wrap))
print(primerChain_unwrapped[1,1:10])
print(primerChain_wrapped[1,1:10])
primerChain_wrapped[,-1] = t(apply(primerChain[,-1],1,unwrap))
primerChain_wrapped = primerChain
primerChain_wrapped[,-1] = t(apply(primerChain[,-1],1,wrap))
primerChain_wrapped[,-1] = t(apply(primerChain_wrapped[,-1],1,unwrap))
print(primerChain_unwrapped[1,1:10])
print(primerChain_wrapped[1,1:10])
tail(primerChain_unwrapped[1,])
tail(primerChain_wrapped[1,])
load(paste(pto,"/chain_thinned_",1,".RData",sep=""));
primerChain = chainList_thinned[[1]]
dim(primerChain)
primerChain_unwrapped = primerChain
primerChain_wrapped = primerChain
primerChain_wrapped[,-1] = t(apply(primerChain[,-1],1,wrap))
primerChain_wrapped[,-1] = t(apply(primerChain_wrapped[,-1],1,unwrap))
tail(primerChain_unwrapped[1,])
tail(primerChain_wrapped[1,])
## Wrap chain (it was unwrapped before saving)
primerChain[,-1] = t(apply(primerChain[,-1],1,wrap))
## load data and model
source("m1_con_load.r")
## chain name
chainName = "chain_thinned_1_resumed"
message(paste(pto,"/",chainName,".RData",sep=""))
## Load chains
load(paste(pto,"/chain_thinned_",1,".RData",sep=""));
primerChain = chainList_thinned[[1]]
dim(primerChain)
## Wrap chain (it was unwrapped before saving)
primerChain[,-1] = t(apply(primerChain[,-1],1,wrap))
## chain
nIt = 1000
chain = DEMCpp(list("dTarget" = dTarget,
"epsilon" = 0.001,
"nIt" = nIt,
"primerChain" = primerChain))$chainList
chain[,-1] = t(apply(chain[,-1],1,unwrap))
chainList  = list(chain)
## libraries
library(Rcpp)
## load modules
sourceCpp("cpp/DEMCpp_v0.2.cpp")
## load data and model
source("m1_con_load.r")
# source("m1_mTL_load.r")
## chain name
chainName = "chain_thinned_1_resumed"
message(paste(pto,"/",chainName,".RData",sep=""))
## Load chains
load(paste(pto,"/chain_thinned_",1,".RData",sep=""));
primerChain = chainList_thinned[[1]]
dim(primerChain)
## Wrap chain (it was unwrapped before saving)
primerChain[,-1] = t(apply(primerChain[,-1],1,wrap))
## Check
primerChain_unwrapped = primerChain
primerChain_wrapped = primerChain
primerChain_wrapped[,-1] = t(apply(primerChain[,-1],1,wrap))
primerChain_wrapped[,-1] = t(apply(primerChain_wrapped[,-1],1,unwrap))
tail(primerChain_unwrapped[1,])
tail(primerChain_wrapped[1,])
## OK wrapping unwrapping works

axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bty="n")
legend("topright", legend = c("b."), bty="n", col=adjustcolor("lightgrey", alpha=0.2), border="NA")
legend("topright", legend = c("b."), col=adjustcolor("lightgrey", alpha=0.2), border=NA)
## legend
legend("topright", legend = c("b."), col=adjustcolor("lightgrey", alpha=0.2), border="NA")
legend("topright", legend = c("b."), col=adjustcolor("lightgrey", alpha=0.2), border=NA)
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), col=adjustcolor("lightgrey", alpha=0.2), border=NA)
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bty="n", bg=adjustcolor("lightgrey", alpha=0.2))
legend("topright", legend = c("b."), bg=adjustcolor("lightgrey", alpha=0.2))
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bg=adjustcolor("lightgrey", alpha=0.2), border = NA)
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bg=adjustcolor("lightgrey", alpha=0.2), box.lwd = 0)
## legend
legend("topright", legend = c("b."), bty="n")
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bty="n")
legend("bottomright", legend = "Negative interaction")
#
par(mfrow=c(2,2))
main = c(paste(response," in streams"),paste(response," in lakes",sep=""))
labs = c("Temperature","BOD")
## POSITIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("a."), bty="n")
legend("bottomright", legend = "Positive interaction", bg=adjustcolor("grey", alpha=0.25), box.lwd = 0)
## NEGATIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bty="n")
legend("bottomright", legend = "Negative interaction", bg=adjustcolor("grey", alpha=0.25), box.lwd = 0)
## ESTIMATED INTERACTION
for(i in 1:2)
{
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) chainList.apply(chainList_thinned,function(x_) Yhat(X_pred(x,y,i),x_[-1][idx_omega_beta]*nscode))$f_mean
for(j in 1:n) IM[,j] = f(x,y[j],i)
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("c.", "d.")[i], bty="n")
}
par(mfrow=c(1,1))
#
par(mfrow=c(2,2))
main = c(paste(response," in streams"),paste(response," in lakes",sep=""))
labs = c("Temperature","BOD")
## POSITIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("a."), bty="n")
legend("topleft", legend = "Positive interaction", bg=adjustcolor("grey", alpha=0.75), box.lwd = 0)
## NEGATIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bty="n")
legend("topleft", legend = "Negative interaction", bg=adjustcolor("grey", alpha=0.75), box.lwd = 0)
## ESTIMATED INTERACTION
for(i in 1:2)
{
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) chainList.apply(chainList_thinned,function(x_) Yhat(X_pred(x,y,i),x_[-1][idx_omega_beta]*nscode))$f_mean
for(j in 1:n) IM[,j] = f(x,y[j],i)
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("c.", "d.")[i], bty="n")
}
par(mfrow=c(1,1))
#
par(mfrow=c(2,2))
main = c(paste(response," in streams"),paste(response," in lakes",sep=""))
labs = c("Temperature","BOD")
## POSITIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("a."), bty="n")
legend("topleft", legend = "Positive interaction", bg=adjustcolor("white", alpha=0.75), box.lwd = 0)
## NEGATIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bty="n")
legend("topleft", legend = "Negative interaction", bg=adjustcolor("white", alpha=0.75), box.lwd = 0)
## ESTIMATED INTERACTION
for(i in 1:2)
{
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) chainList.apply(chainList_thinned,function(x_) Yhat(X_pred(x,y,i),x_[-1][idx_omega_beta]*nscode))$f_mean
for(j in 1:n) IM[,j] = f(x,y[j],i)
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2],main=main[i])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("c.", "d.")[i], bty="n")
}
par(mfrow=c(1,1))
#
par(mfrow=c(2,2))
main = c(paste(response," in streams"),paste(response," in lakes",sep=""))
labs = c("Temperature","BOD")
## POSITIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("a."), bty="n")
legend("topleft", legend = "Positive interaction", bg=adjustcolor("white", alpha=0.75), box.lwd = 0)
## NEGATIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bty="n")
legend("topleft", legend = "Negative interaction", bg=adjustcolor("white", alpha=0.75), box.lwd = 0)
## ESTIMATED INTERACTION
for(i in 1:2)
{
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) chainList.apply(chainList_thinned,function(x_) Yhat(X_pred(x,y,i),x_[-1][idx_omega_beta]*nscode))$f_mean
for(j in 1:n) IM[,j] = f(x,y[j],i)
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("c.", "d.")[i], bty="n")
}
par(mfrow=c(1,1))
par(mfrow=c(2,2))
main = c(paste(response," in streams"),paste(response," in lakes",sep=""))
labs = c("Temperature","BOD")
## POSITIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("a."), bty="n")
legend("bottomright", legend = "Expected Positive Interaction", bg=adjustcolor("white", alpha=0.75), box.lwd = 0)
## NEGATIVE INTERACTION
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) - x * y
for(j in 1:n) IM[,j] = f(x,y[j],i)
IM = (IM - mean(IM))/sd(IM) * Y_sd
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("b."), bty="n")
legend("bottomright", legend = "Expected Negative Interaction", bg=adjustcolor("white", alpha=0.75), box.lwd = 0)
## ESTIMATED INTERACTION
for(i in 1:2)
{
## compute effect matrix
x  = y = seq(-3,3,0.1)
n  = length(x)
IM = matrix(rep(0,n),nrow=n,ncol=n)
f  = function(x,y,i) chainList.apply(chainList_thinned,function(x_) Yhat(X_pred(x,y,i),x_[-1][idx_omega_beta]*nscode))$f_mean
for(j in 1:n) IM[,j] = f(x,y[j],i)
## visualise matrix
maxAbsMinMax = max(abs(IM))
levels = seq(-maxAbsMinMax,maxAbsMinMax,2*maxAbsMinMax/1000)
colorLevels = rev(rainbow(1000,start=0,end=1,alpha=0.5))
image(IM,breaks=levels,col=colorLevels,xaxt="n",yaxt="n",xlab=labs[1],ylab=labs[2])
contour(IM,add=T)
## axis
x  = seq(6,18,2)
x_ = (x-temp_mean)/temp_sd
y  = seq(0,4,1)
y_ = (y-bod_mean)/bod_sd
axis(1,label=round(x,2),at=(x_-min(x_))/(max(x_)-min(x_)))
axis(2,label=round(y,2),at=(y_-min(y_))/(max(y_)-min(y_)))
## legend
legend("topright", legend = c("c.", "d.")[i], bty="n")
}
par(mfrow=c(1,1))
#
